from typing import List

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        def dfs(x, y, index):
            # If index is equal to the length of the word, we have found the word
            if index == len(word):
                return True
            # Check boundaries and if the current cell matches the current character in the word
            if (x < 0 or x >= len(board) or y < 0 or y >= len(board[0]) or
                board[x][y] != word[index]):
                return False
            
            # Save the state of the current cell and mark it as visited
            temp = board[x][y]
            board[x][y] = '#'
            
            # Explore all four directions
            found = (dfs(x + 1, y, index + 1) or
                     dfs(x - 1, y, index + 1) or
                     dfs(x, y + 1, index + 1) or
                     dfs(x, y - 1, index + 1))
            
            # Restore the cell to its original state
            board[x][y] = temp
            
            return found
        
        # Iterate over each cell in the grid to start the DFS
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == word[0]:  # Only start DFS if the first character matches
                    if dfs(i, j, 0):
                        return True
        
        return False
